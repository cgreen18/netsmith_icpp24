
# Name of model to be built and evaluated
ModelName                               = Router

# Query string to choose what to evaluate (use '\' to enable multiline config)
QueryString                             = \
    Energy>>Router:WriteBuffer@0 \
    Energy>>Router:ReadBuffer@0 \
    Energy>>Router:TraverseCrossbar->Multicast1@0 \
    Energy>>Router:ArbitrateSwitch->ArbitrateStage1@0 \
    Energy>>Router:ArbitrateSwitch->ArbitrateStage2@0 \
    Energy>>Router:DistributeClock@0 \
    NddPower>>Router:Leakage@1 \
    Area>>Router:Active@1 \


# Injection rate (# flits per cycle per port), assuming that the router is not
# saturated
InjectionRate                           = 0.3
# Evaluation string
EvaluateString                          = \
    ejection_rate   = $(NumberInputPorts) * $(InjectionRate) / $(NumberOutputPorts); \
    buf_rd_dynamic  = $(Energy>>Router:ReadBuffer) * $(Frequency); \
    buf_wr_dynamic  = $(Energy>>Router:WriteBuffer) * $(Frequency); \
    buf_static      = $(NddPower>>Router->InputPort:Leakage) * $(NumberInputPorts) + ($(NddPower>>Router->PipelineReg0:Leakage) + $(NddPower>>Router->PipelineReg1:Leakage)) * $(NumberInputPorts) * $(NumberBitsPerFlit); \
    xbar_o_dynamic  = $(Energy>>Router:TraverseCrossbar->Multicast1) * $(Frequency); \
    xbar_static     = $(NddPower>>Router->Crossbar:Leakage) + $(NddPower>>Router->PipelineReg2_0:Leakage) * $(NumberOutputPorts) * $(NumberBitsPerFlit); \
    sa_o_dynamic    = ($(Energy>>Router:ArbitrateSwitch->ArbitrateStage1) + $(Energy>>Router:ArbitrateSwitch->ArbitrateStage2)) * $(Frequency); \
    sa_static       = $(NddPower>>Router->SwitchAllocator:Leakage); \
    clock_o_dynamic = $(Energy>>Router:DistributeClock) * $(Frequency); \
    clock_static    = $(NddPower>>Router->ClockTree:Leakage); \
    buffer_dynamic  = buf_wr_dynamic * $(InjectionRate) * $(NumberInputPorts) + buf_rd_dynamic * ejection_rate * $(NumberOutputPorts); \
    buffer_leakage  = buf_static; \
    xbar_dynamic    = xbar_o_dynamic * ejection_rate * $(NumberOutputPorts); \
    xbar_leakage    = xbar_static; \
    sa_dynamic      = sa_o_dynamic * ejection_rate * $(NumberOutputPorts); \
    sa_leakage      = sa_static; \
    clock_dynamic   = clock_o_dynamic; \
    clock_leakage   = clock_static; \
    total_dynamic   = buffer_dynamic + xbar_dynamic + sa_dynamic + clock_dynamic; \
    total_leakage   = buffer_leakage + xbar_leakage + sa_leakage + clock_leakage; \
    buf_area        = ($(Area>>Router->InputPort:Active) + ($(Area>>Router->PipelineReg0:Active) + $(Area>>Router->PipelineReg1:Active)) * $(NumberBitsPerFlit)) * $(NumberInputPorts); \
    xbar_area       = $(Area>>Router->Crossbar:Active) + $(Area>>Router->Crossbar_Sel_DFF:Active) + $(Area>>Router->PipelineReg2_0:Active) * $(NumberBitsPerFlit) * $(NumberOutputPorts); \
    sa_area         = $(Area>>Router->SwitchAllocator:Active); \
    other_area      = $(Area>>Router->ClockTree:Active); \
    print "DynamicPower:Buffer" buffer_dynamic; \
    print "LeakagePower:Buffer" buffer_leakage; \
    print "DynamicPower:Crossbar" xbar_dynamic; \
    print "LeakagePower:Crossbar" xbar_leakage; \
    print "DynamicPower:SwitchAllocator" sa_dynamic; \
    print "LeakagePower:SwitchAllocator" sa_leakage; \
    print "DynamicPower:Clock" clock_dynamic; \
    print "LeakagePower:Clock" clock_leakage; \
    print "DynamicPower:Total" total_dynamic; \
    print "LeakagePower:Total" $(NddPower>>Router:Leakage); \
    print "Area:Buffer" buf_area; \
    print "Area:Crossbar" xbar_area; \
    print "Area:SwitchAllocator" sa_area; \
    print "Area:Other" other_area; \

# Technology file (see other models in tech/models)
ElectricalTechModelFilename             = ext/dsent/tech/tech_models/Bulk22LVT.model

###############################################################################
# Timing optimization
###############################################################################

# True if want to perform timing optimization; otherwise, false.
IsPerformTimingOptimization             = false
# # Nets that the timing optimizer starts from
TimingOptimization->StartNetNames       = [*]
# Operating frequency (Hz)
Frequency                               = 3.6e9


# NOTE: If you adjust Frequency, make sure you adjust SWSR->LinkDataRate
# to make sure it is >= Frequency, since the model doesn't support serialization
# ratios < 1.

# Report timing
IsReportTiming                                  = false
Report timing
ReportTiming->StartNetNames                     = [CK]

###############################################################################
# Model specifications
###############################################################################

# Number of input ports
NumberInputPorts                        = 16
# Number of output ports
NumberOutputPorts                       = 1
# Flit width (bit)
NumberBitsPerFlit                       = 128

# In this example, we define 2 virtual networks (message classes), VN1 and VN2. 
#                           VN1 VN2
# Number of VCs              2   3
# Number of buffers / VC     4   5
#
# So in total, there are (2 * 4) + (3 * 5) = 23 flit buffers
#
# Number of virtual networks (number of message classes)
NumberVirtualNetworks                   = 3
# Number of virtual channels per virtual network
NumberVirtualChannelsPerVirtualNetwork  = [6, 6, 6]
# Number of buffers per virtual channel
NumberBuffersPerVirtualChannel          = [4, 5, 5]

# InputPort 
# ---------
# buffer model
InputPort->BufferModel                  = DFFRAM

# Crossbar
# --------
# crossbar model
CrossbarModel                           = MultiplexerCrossbar

# Switch allocator
# ----------------
# arbiter model
SwitchAllocator->ArbiterModel           = MatrixArbiter

# Clock tree
# ----------
# clock tree model
ClockTreeModel                          = BroadcastHTree
# number of levels
ClockTree->NumberLevels                 = 5
# wire layer
ClockTree->WireLayer                    = Global
# wire width multiplier
ClockTree->WireWidthMultiplier          = 1.0

